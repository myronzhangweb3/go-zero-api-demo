// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountFieldNames          = builder.RawFieldNames(&Account{}, true)
	accountRows                = strings.Join(accountFieldNames, ",")
	accountRowsExpectAutoSet   = strings.Join(stringx.Remove(accountFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	accountRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(accountFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	accountModel interface {
		Insert(ctx context.Context, data *Account) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Account, error)
		FindOneByAddress(ctx context.Context, address string) (*Account, error)
		Update(ctx context.Context, data *Account) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Account struct {
		Id           int64          `db:"id"`
		CreatedAt    sql.NullTime   `db:"created_at"`
		UpdatedAt    sql.NullTime   `db:"updated_at"`
		DeletedAt    sql.NullTime   `db:"deleted_at"`
		Address      string         `db:"address"`
		AddressIndex string         `db:"address_index"`
		Comment      sql.NullString `db:"comment"`
	}
)

func newAccountModel(conn sqlx.SqlConn) *defaultAccountModel {
	return &defaultAccountModel{
		conn:  conn,
		table: `"public"."account"`,
	}
}

func (m *defaultAccountModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAccountModel) FindOne(ctx context.Context, id int64) (*Account, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", accountRows, m.table)
	var resp Account
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountModel) FindOneByAddress(ctx context.Context, address string) (*Account, error) {
	var resp Account
	query := fmt.Sprintf("select %s from %s where address = $1 limit 1", accountRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, address)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountModel) Insert(ctx context.Context, data *Account) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, accountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Address, data.AddressIndex, data.Comment)
	return ret, err
}

func (m *defaultAccountModel) Update(ctx context.Context, newData *Account) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, accountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.DeletedAt, newData.Address, newData.AddressIndex, newData.Comment)
	return err
}

func (m *defaultAccountModel) tableName() string {
	return m.table
}
